{"ast":null,"code":"// import React, { useState, useEffect, useContext } from 'react';\n// import axios from 'axios';\n// import ScrumDetails from '../Scrum Details/ScrumDetails';\n// import { UserContext } from '../../context/UserContext';\n\n// const Dashboard = () => {\n//     const [scrums, setScrums] = useState([]);\n//     const [selectedScrum, setSelectedScrum] = useState(null);\n//     const [showForm, setShowForm] = useState(false);\n//     const [users, setUsers] = useState([]);\n//     const [newScrumName, setNewScrumName] = useState('');\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\n//     const [newTaskDescription, setNewTaskDescription] = useState('');\n//     const [newTaskStatus, setNewTaskStatus] = useState('To Do');\n//     const [newTaskAssignedTo, setNewTaskAssignedTo] = useState('');\n//     const { user } = useContext(UserContext);\n\n//     useEffect(() => {\n//         const fetchScrums = async () => {\n//             try {\n//                 const response = await axios.get('http://localhost:4000/scrums');\n//                 setScrums(response.data);\n//             } catch (error) {\n//                 console.error('Error fetching scrums:', error);\n//             }\n//         };\n\n//         const fetchUsers = async () => {\n//             try {\n//                 const response = await axios.get('http://localhost:4000/users');\n//                 setUsers(response.data);\n//             } catch (error) {\n//                 console.error('Error fetching users:', error);\n//             }\n//         };\n\n//         fetchScrums();\n//         fetchUsers();\n//     }, []);\n\n//     const handleGetDetails = async (scrumId) => {\n//         try {\n//             const response = await axios.get(`http://localhost:4000/scrums/${scrumId}`);\n//             setSelectedScrum(response.data);\n//         } catch (error) {\n//             console.error('Error fetching scrum details:', error);\n//         }\n//     };\n\n//     const handleAddScrum = async (event) => {\n//         event.preventDefault();\n\n//         try {\n//             // Add new Scrum\n//             const newScrumResponse = await axios.post('http://localhost:4000/scrums', {\n//                 name: newScrumName,\n//             });\n\n//             const newScrum = newScrumResponse.data;\n\n//             // Add new Task\n//             const newTaskResponse = await axios.post('http://localhost:4000/tasks', {\n//                 title: newTaskTitle,\n//                 description: newTaskDescription,\n//                 status: newTaskStatus,\n//                 scrumId: newScrum.id,\n//                 assignedTo: newTaskAssignedTo,\n//                 history: [\n//                     {\n//                         status: newTaskStatus,\n//                         date: new Date().toISOString().split('T')[0], // Set the current date\n//                     },\n//                 ],\n//             });\n\n//             const updatedScrums = await axios.get('http://localhost:4000/scrums');\n//             setScrums(updatedScrums.data);\n//             setShowForm(false); // Hide the form after submission\n//             setNewScrumName('');\n//             setNewTaskTitle('');\n//             setNewTaskDescription('');\n//             setNewTaskStatus('To Do');\n//             setNewTaskAssignedTo('');\n//         } catch (error) {\n//             console.error('Error adding scrum:', error);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>Scrum Teams</h2>\n//             {user?.role === 'admin' && <div>\n//                 <button onClick={() => setShowForm(!showForm)}>\n//                     {showForm ? 'Cancel' : 'Add New Scrum'}\n//                 </button>\n//                 {showForm && (\n//                     <form onSubmit={handleAddScrum}>\n//                         <div>\n//                             <label>Scrum Name:</label>\n//                             <input\n//                                 type=\"text\"\n//                                 value={newScrumName}\n//                                 onChange={(e) => setNewScrumName(e.target.value)}\n//                                 required\n//                             />\n//                         </div>\n//                         <div>\n//                             <label>Task Title:</label>\n//                             <input\n//                                 type=\"text\"\n//                                 value={newTaskTitle}\n//                                 onChange={(e) => setNewTaskTitle(e.target.value)}\n//                                 required\n//                             />\n//                         </div>\n//                         <div>\n//                             <label>Task Description:</label>\n//                             <input\n//                                 type=\"text\"\n//                                 value={newTaskDescription}\n//                                 onChange={(e) => setNewTaskDescription(e.target.value)}\n//                                 required\n//                             />\n//                         </div>\n//                         <div>\n//                             <label>Task Status:</label>\n//                             <select\n//                                 value={newTaskStatus}\n//                                 onChange={(e) => setNewTaskStatus(e.target.value)}\n//                                 required\n//                             >\n//                                 <option value=\"To Do\">To Do</option>\n//                                 <option value=\"In Progress\">In Progress</option>\n//                                 <option value=\"Done\">Done</option>\n//                             </select>\n//                         </div>\n//                         <div>\n//                             <label>Assign To:</label>\n//                             <select\n//                                 value={newTaskAssignedTo}\n//                                 onChange={(e) => setNewTaskAssignedTo(e.target.value)}\n//                                 required\n//                             >\n//                                 <option value=\"\">Select a user</option>\n//                                 {users.map((user) => (\n//                                     <option key={user.id} value={user.id}>\n//                                         {user.name} ({user.email})\n//                                     </option>\n//                                 ))}\n//                             </select>\n//                         </div>\n//                         <button type=\"submit\">Create Scrum</button>\n//                     </form>\n//                 )}\n//             </div>}\n//             <ul>\n//                 {scrums.map((scrum) => (\n//                     <li key={scrum.id}>\n//                         {scrum.name}\n//                         <button onClick={() => handleGetDetails(scrum.id)}>Get Details</button>\n//                     </li>\n//                 ))}\n//             </ul>\n//             {selectedScrum && <ScrumDetails scrum={selectedScrum} />}\n//         </div>\n//     );\n// };\n\n// export default Dashboard;","map":{"version":3,"names":[],"sources":["C:/Users/omkar/OneDrive/Desktop/WIPRO 2/Sidhi Capstone/React-Agile-Track-System-Solution-main/src/components/Dashboard/Dashboard.js"],"sourcesContent":["// import React, { useState, useEffect, useContext } from 'react';\r\n// import axios from 'axios';\r\n// import ScrumDetails from '../Scrum Details/ScrumDetails';\r\n// import { UserContext } from '../../context/UserContext';\r\n\r\n// const Dashboard = () => {\r\n//     const [scrums, setScrums] = useState([]);\r\n//     const [selectedScrum, setSelectedScrum] = useState(null);\r\n//     const [showForm, setShowForm] = useState(false);\r\n//     const [users, setUsers] = useState([]);\r\n//     const [newScrumName, setNewScrumName] = useState('');\r\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\r\n//     const [newTaskDescription, setNewTaskDescription] = useState('');\r\n//     const [newTaskStatus, setNewTaskStatus] = useState('To Do');\r\n//     const [newTaskAssignedTo, setNewTaskAssignedTo] = useState('');\r\n//     const { user } = useContext(UserContext);\r\n\r\n//     useEffect(() => {\r\n//         const fetchScrums = async () => {\r\n//             try {\r\n//                 const response = await axios.get('http://localhost:4000/scrums');\r\n//                 setScrums(response.data);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching scrums:', error);\r\n//             }\r\n//         };\r\n\r\n//         const fetchUsers = async () => {\r\n//             try {\r\n//                 const response = await axios.get('http://localhost:4000/users');\r\n//                 setUsers(response.data);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching users:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchScrums();\r\n//         fetchUsers();\r\n//     }, []);\r\n\r\n//     const handleGetDetails = async (scrumId) => {\r\n//         try {\r\n//             const response = await axios.get(`http://localhost:4000/scrums/${scrumId}`);\r\n//             setSelectedScrum(response.data);\r\n//         } catch (error) {\r\n//             console.error('Error fetching scrum details:', error);\r\n//         }\r\n//     };\r\n\r\n//     const handleAddScrum = async (event) => {\r\n//         event.preventDefault();\r\n\r\n//         try {\r\n//             // Add new Scrum\r\n//             const newScrumResponse = await axios.post('http://localhost:4000/scrums', {\r\n//                 name: newScrumName,\r\n//             });\r\n\r\n//             const newScrum = newScrumResponse.data;\r\n\r\n//             // Add new Task\r\n//             const newTaskResponse = await axios.post('http://localhost:4000/tasks', {\r\n//                 title: newTaskTitle,\r\n//                 description: newTaskDescription,\r\n//                 status: newTaskStatus,\r\n//                 scrumId: newScrum.id,\r\n//                 assignedTo: newTaskAssignedTo,\r\n//                 history: [\r\n//                     {\r\n//                         status: newTaskStatus,\r\n//                         date: new Date().toISOString().split('T')[0], // Set the current date\r\n//                     },\r\n//                 ],\r\n//             });\r\n\r\n//             const updatedScrums = await axios.get('http://localhost:4000/scrums');\r\n//             setScrums(updatedScrums.data);\r\n//             setShowForm(false); // Hide the form after submission\r\n//             setNewScrumName('');\r\n//             setNewTaskTitle('');\r\n//             setNewTaskDescription('');\r\n//             setNewTaskStatus('To Do');\r\n//             setNewTaskAssignedTo('');\r\n//         } catch (error) {\r\n//             console.error('Error adding scrum:', error);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>Scrum Teams</h2>\r\n//             {user?.role === 'admin' && <div>\r\n//                 <button onClick={() => setShowForm(!showForm)}>\r\n//                     {showForm ? 'Cancel' : 'Add New Scrum'}\r\n//                 </button>\r\n//                 {showForm && (\r\n//                     <form onSubmit={handleAddScrum}>\r\n//                         <div>\r\n//                             <label>Scrum Name:</label>\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 value={newScrumName}\r\n//                                 onChange={(e) => setNewScrumName(e.target.value)}\r\n//                                 required\r\n//                             />\r\n//                         </div>\r\n//                         <div>\r\n//                             <label>Task Title:</label>\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 value={newTaskTitle}\r\n//                                 onChange={(e) => setNewTaskTitle(e.target.value)}\r\n//                                 required\r\n//                             />\r\n//                         </div>\r\n//                         <div>\r\n//                             <label>Task Description:</label>\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 value={newTaskDescription}\r\n//                                 onChange={(e) => setNewTaskDescription(e.target.value)}\r\n//                                 required\r\n//                             />\r\n//                         </div>\r\n//                         <div>\r\n//                             <label>Task Status:</label>\r\n//                             <select\r\n//                                 value={newTaskStatus}\r\n//                                 onChange={(e) => setNewTaskStatus(e.target.value)}\r\n//                                 required\r\n//                             >\r\n//                                 <option value=\"To Do\">To Do</option>\r\n//                                 <option value=\"In Progress\">In Progress</option>\r\n//                                 <option value=\"Done\">Done</option>\r\n//                             </select>\r\n//                         </div>\r\n//                         <div>\r\n//                             <label>Assign To:</label>\r\n//                             <select\r\n//                                 value={newTaskAssignedTo}\r\n//                                 onChange={(e) => setNewTaskAssignedTo(e.target.value)}\r\n//                                 required\r\n//                             >\r\n//                                 <option value=\"\">Select a user</option>\r\n//                                 {users.map((user) => (\r\n//                                     <option key={user.id} value={user.id}>\r\n//                                         {user.name} ({user.email})\r\n//                                     </option>\r\n//                                 ))}\r\n//                             </select>\r\n//                         </div>\r\n//                         <button type=\"submit\">Create Scrum</button>\r\n//                     </form>\r\n//                 )}\r\n//             </div>}\r\n//             <ul>\r\n//                 {scrums.map((scrum) => (\r\n//                     <li key={scrum.id}>\r\n//                         {scrum.name}\r\n//                         <button onClick={() => handleGetDetails(scrum.id)}>Get Details</button>\r\n//                     </li>\r\n//                 ))}\r\n//             </ul>\r\n//             {selectedScrum && <ScrumDetails scrum={selectedScrum} />}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Dashboard;\r\n"],"mappings},"metadata":{},"sourceType":"module"}