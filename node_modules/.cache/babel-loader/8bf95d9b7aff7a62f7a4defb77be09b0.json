{"ast":null,"code":"// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { useHistory } from 'react-router-dom';\n\n// // const ScrumDetails = ({ scrum }) => {\n// //     const [tasks, setTasks] = useState([]);\n// //     const [users, setUsers] = useState([]);\n// //     const history = useHistory();\n\n// //     useEffect(() => {\n// //         const checkUser = () => {\n// //             const loggedInUser = JSON.parse(localStorage.getItem('user'));\n// //             if (!loggedInUser) {\n// //                 history.push('/login');\n// //             }\n// //         };\n\n// //         checkUser();\n// //     }, [history]);\n\n// //     useEffect(() => {\n// //         const fetchTasks = async () => {\n// //             try {\n// //                 const response = await axios.get(`http://localhost:4000/tasks?scrumId=${scrum.id}`);\n// //                 setTasks(response.data);\n// //             } catch (error) {\n// //                 console.error('Error fetching tasks:', error);\n// //             }\n// //         };\n\n// //         fetchTasks();\n// //     }, [scrum.id]);\n\n// //     useEffect(() => {\n// //         const fetchUsers = async () => {\n// //             try {\n// //                 const response = await axios.get('http://localhost:4000/users');\n// //                 const scrumUsers = response.data.filter(user => tasks.some(task => task.assignedTo === user.id));\n// //                 setUsers(scrumUsers);\n// //             } catch (error) {\n// //                 console.error('Error fetching users:', error);\n// //             }\n// //         };\n\n// //         if (tasks.length > 0) {\n// //             fetchUsers();\n// //         }\n// //     }, [tasks]);\n\n// //     return (\n// //         <div>\n// //             <h3>Scrum Details for {scrum.name}</h3>\n// //             <h4>Tasks</h4>\n// //             <ul>\n// //                 {tasks.map(task => (\n// //                     <li key={task.id}>\n// //                         <strong>{task.title}:</strong> {task.description} - <em>{task.status}</em>\n// //                     </li>\n// //                 ))}\n// //             </ul>\n// //             <h4>Users</h4>\n// //             <ul>\n// //                 {users.map(user => (\n// //                     <li key={user.id}>\n// //                         {user.name} ({user.email})\n// //                     </li>\n// //                 ))}\n// //             </ul>\n// //         </div>\n// //     );\n// // };\n\n// // export default ScrumDetails;\n\n// import React, { useState, useEffect, useContext } from 'react';\n// import axios from 'axios';\n// import { UserContext } from '../../context/UserContext';\n// import { useHistory } from 'react-router-dom';\n\n// const ScrumDetails = ({ scrum }) => {\n//     const [tasks, setTasks] = useState([]);\n//     const [users, setUsers] = useState([]);\n//     const { user } = useContext(UserContext);\n//     const history = useHistory();\n\n//     useEffect(() => {\n//         const checkUser = () => {\n//             const loggedInUser = JSON.parse(localStorage.getItem('user'));\n//             if (!loggedInUser) {\n//                 history.push('/login');\n//             }\n//         };\n\n//         checkUser();\n//     }, [history]);\n\n//     useEffect(() => {\n//         const fetchTasks = async () => {\n//             try {\n//                 const response = await axios.get(`http://localhost:4000/tasks?scrumId=${scrum.id}`);\n//                 setTasks(response.data);\n//             } catch (error) {\n//                 console.error('Error fetching tasks:', error);\n//             }\n//         };\n\n//         fetchTasks();\n//     }, [scrum.id]);\n\n//     useEffect(() => {\n//         const fetchUsers = async () => {\n//             try {\n//                 const response = await axios.get('http://localhost:4000/users');\n//                 const scrumUsers = response.data.filter(user => tasks.some(task => task.assignedTo === user.id));\n//                 setUsers(scrumUsers);\n//             } catch (error) {\n//                 console.error('Error fetching users:', error);\n//             }\n//         };\n\n//         if (tasks.length > 0) {\n//             fetchUsers();\n//         }\n//     }, [tasks]);\n\n//     const handleStatusChange = async (taskId, newStatus) => {\n//         try {\n//             await axios.patch(`http://localhost:4000/tasks/${taskId}`, {\n//                 status: newStatus,\n//                 history: [\n//                     ...tasks.find(task => task.id === taskId).history,\n//                     {\n//                         status: newStatus,\n//                         date: new Date().toISOString().split('T')[0], // Set the current date\n//                     },\n//                 ],\n//             });\n\n//             // Update the tasks state with the new status\n//             setTasks(prevTasks =>\n//                 prevTasks.map(task =>\n//                     task.id === taskId ? { ...task, status: newStatus } : task\n//                 )\n//             );\n//         } catch (error) {\n//             console.error('Error updating task status:', error);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h3>Scrum Details for {scrum.name}</h3>\n//             <h4>Tasks</h4>\n//             <ul>\n//                 {tasks.map(task => (\n//                     <li key={task.id}>\n//                         <strong>{task.title}:</strong> {task.description} - <em>{task.status}</em>\n//                         {user?.role === 'admin' && (\n//                             <select\n//                                 value={task.status}\n//                                 onChange={(e) => handleStatusChange(task.id, e.target.value)}\n//                             >\n//                                 <option value=\"To Do\">To Do</option>\n//                                 <option value=\"In Progress\">In Progress</option>\n//                                 <option value=\"Done\">Done</option>\n//                             </select>\n//                         )}\n//                     </li>\n//                 ))}\n//             </ul>\n//             <h4>Users</h4>\n//             <ul>\n//                 {users.map(user => (\n//                     <li key={user.id}>\n//                         {user.name} ({user.email})\n//                     </li>\n//                 ))}\n//             </ul>\n//         </div>\n//     );\n// };\n\n// export default ScrumDetails;","map":{"version":3,"names":[],"sources":["C:/Users/omkar/OneDrive/Desktop/WIPRO 2/Sidhi Capstone/React-Agile-Track-System-Solution-main/src/components/Scrum Details/ScrumDetails.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { useHistory } from 'react-router-dom';\r\n\r\n// // const ScrumDetails = ({ scrum }) => {\r\n// //     const [tasks, setTasks] = useState([]);\r\n// //     const [users, setUsers] = useState([]);\r\n// //     const history = useHistory();\r\n\r\n// //     useEffect(() => {\r\n// //         const checkUser = () => {\r\n// //             const loggedInUser = JSON.parse(localStorage.getItem('user'));\r\n// //             if (!loggedInUser) {\r\n// //                 history.push('/login');\r\n// //             }\r\n// //         };\r\n\r\n// //         checkUser();\r\n// //     }, [history]);\r\n\r\n// //     useEffect(() => {\r\n// //         const fetchTasks = async () => {\r\n// //             try {\r\n// //                 const response = await axios.get(`http://localhost:4000/tasks?scrumId=${scrum.id}`);\r\n// //                 setTasks(response.data);\r\n// //             } catch (error) {\r\n// //                 console.error('Error fetching tasks:', error);\r\n// //             }\r\n// //         };\r\n\r\n// //         fetchTasks();\r\n// //     }, [scrum.id]);\r\n\r\n// //     useEffect(() => {\r\n// //         const fetchUsers = async () => {\r\n// //             try {\r\n// //                 const response = await axios.get('http://localhost:4000/users');\r\n// //                 const scrumUsers = response.data.filter(user => tasks.some(task => task.assignedTo === user.id));\r\n// //                 setUsers(scrumUsers);\r\n// //             } catch (error) {\r\n// //                 console.error('Error fetching users:', error);\r\n// //             }\r\n// //         };\r\n\r\n// //         if (tasks.length > 0) {\r\n// //             fetchUsers();\r\n// //         }\r\n// //     }, [tasks]);\r\n\r\n// //     return (\r\n// //         <div>\r\n// //             <h3>Scrum Details for {scrum.name}</h3>\r\n// //             <h4>Tasks</h4>\r\n// //             <ul>\r\n// //                 {tasks.map(task => (\r\n// //                     <li key={task.id}>\r\n// //                         <strong>{task.title}:</strong> {task.description} - <em>{task.status}</em>\r\n// //                     </li>\r\n// //                 ))}\r\n// //             </ul>\r\n// //             <h4>Users</h4>\r\n// //             <ul>\r\n// //                 {users.map(user => (\r\n// //                     <li key={user.id}>\r\n// //                         {user.name} ({user.email})\r\n// //                     </li>\r\n// //                 ))}\r\n// //             </ul>\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default ScrumDetails;\r\n\r\n\r\n// import React, { useState, useEffect, useContext } from 'react';\r\n// import axios from 'axios';\r\n// import { UserContext } from '../../context/UserContext';\r\n// import { useHistory } from 'react-router-dom';\r\n\r\n// const ScrumDetails = ({ scrum }) => {\r\n//     const [tasks, setTasks] = useState([]);\r\n//     const [users, setUsers] = useState([]);\r\n//     const { user } = useContext(UserContext);\r\n//     const history = useHistory();\r\n\r\n//     useEffect(() => {\r\n//         const checkUser = () => {\r\n//             const loggedInUser = JSON.parse(localStorage.getItem('user'));\r\n//             if (!loggedInUser) {\r\n//                 history.push('/login');\r\n//             }\r\n//         };\r\n\r\n//         checkUser();\r\n//     }, [history]);\r\n\r\n//     useEffect(() => {\r\n//         const fetchTasks = async () => {\r\n//             try {\r\n//                 const response = await axios.get(`http://localhost:4000/tasks?scrumId=${scrum.id}`);\r\n//                 setTasks(response.data);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching tasks:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchTasks();\r\n//     }, [scrum.id]);\r\n\r\n//     useEffect(() => {\r\n//         const fetchUsers = async () => {\r\n//             try {\r\n//                 const response = await axios.get('http://localhost:4000/users');\r\n//                 const scrumUsers = response.data.filter(user => tasks.some(task => task.assignedTo === user.id));\r\n//                 setUsers(scrumUsers);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching users:', error);\r\n//             }\r\n//         };\r\n\r\n//         if (tasks.length > 0) {\r\n//             fetchUsers();\r\n//         }\r\n//     }, [tasks]);\r\n\r\n//     const handleStatusChange = async (taskId, newStatus) => {\r\n//         try {\r\n//             await axios.patch(`http://localhost:4000/tasks/${taskId}`, {\r\n//                 status: newStatus,\r\n//                 history: [\r\n//                     ...tasks.find(task => task.id === taskId).history,\r\n//                     {\r\n//                         status: newStatus,\r\n//                         date: new Date().toISOString().split('T')[0], // Set the current date\r\n//                     },\r\n//                 ],\r\n//             });\r\n\r\n//             // Update the tasks state with the new status\r\n//             setTasks(prevTasks =>\r\n//                 prevTasks.map(task =>\r\n//                     task.id === taskId ? { ...task, status: newStatus } : task\r\n//                 )\r\n//             );\r\n//         } catch (error) {\r\n//             console.error('Error updating task status:', error);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h3>Scrum Details for {scrum.name}</h3>\r\n//             <h4>Tasks</h4>\r\n//             <ul>\r\n//                 {tasks.map(task => (\r\n//                     <li key={task.id}>\r\n//                         <strong>{task.title}:</strong> {task.description} - <em>{task.status}</em>\r\n//                         {user?.role === 'admin' && (\r\n//                             <select\r\n//                                 value={task.status}\r\n//                                 onChange={(e) => handleStatusChange(task.id, e.target.value)}\r\n//                             >\r\n//                                 <option value=\"To Do\">To Do</option>\r\n//                                 <option value=\"In Progress\">In Progress</option>\r\n//                                 <option value=\"Done\">Done</option>\r\n//                             </select>\r\n//                         )}\r\n//                     </li>\r\n//                 ))}\r\n//             </ul>\r\n//             <h4>Users</h4>\r\n//             <ul>\r\n//                 {users.map(user => (\r\n//                     <li key={user.id}>\r\n//                         {user.name} ({user.email})\r\n//                     </li>\r\n//                 ))}\r\n//             </ul>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ScrumDetails;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}